{"version":3,"sources":["webpack://tatum_utils/webpack/bootstrap","webpack://tatum_utils/external \"wp['i18n']\"","webpack://tatum_utils/external \"React\"","webpack://tatum_utils/./lib/options.tsx","webpack://tatum_utils/./lib/helpers.tsx","webpack://tatum_utils/./lib/factory/context.tsx","webpack://tatum_utils/./lib/factory/ajax/routeHttpVerbEnum.tsx","webpack://tatum_utils/./lib/factory/ajax/commonUrlBuilder.tsx","webpack://tatum_utils/./lib/factory/ajax/parseResult.tsx","webpack://tatum_utils/./lib/factory/ajax/commonRequest.tsx","webpack://tatum_utils/./lib/factory/ajax/createRequestFactory.tsx","webpack://tatum_utils/./lib/factory/ajax/corruptRestApi.tsx","webpack://tatum_utils/./lib/factory/i18n.tsx","webpack://tatum_utils/./lib/wp-api/rest.plugin.get.tsx","webpack://tatum_utils/./lib/components/button.tsx","webpack://tatum_utils/./lib/components/notice.tsx","webpack://tatum_utils/external \"wp\""],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","wp","React","BaseOptions","slug","textDomain","version","restUrl","restNamespace","restRoot","restQuery","restNonce","publicUrl","replace","g","toUpperCase","env","camelCase","slugCamelCase","untrailingslashit","str","endsWith","trailingslashit","createContextFactory","StoreContext","createContext","StoreProvider","children","Provider","useStores","useContext","RouteHttpVerb","WP_REST_API_USE_GLOBAL_METHOD","commonUrlBuilder","location","params","nonce","options","apiUrl","Url","query","permalinkPath","rest_route","pathname","foundParams","path","match","group","getParams","keys","checkParam","indexOf","usePath","namespace","useThisProtocol","href","protocol","set","_wpnonce","method","GET","_method","deepMerge","all","toString","parseResult","url","a","cloneForFallback","clone","json","text","body","console","warn","split","line","startsWith","JSON","parse","lastError","commonRequest","routeRequest","request","settings","POST","allowBody","apiUrlBuilt","fetch","headers","stringify","undefined","ok","responseJSON","detectCorrupRestApiFailed","resultAny","createRequestFactory","urlBuilder","passOptions","handleCorrupRestApi","resolve","forceRerequest","setTimeout","notice","document","getElementById","style","display","li","createElement","innerHTML","childNodes","appendChild","createLocalizationFactory","wpi18nLazy","i18n","localeData","setLocaleData","_n","single","plural","count","args","wpi18n","_nx","context","_x","__","_i","translation","components","interpolate","mixedString","ButtonType","locationRestPluginGet","NoticeType","Button","className","type","rest","buttonClassName","classNames","Primary","Secondary","Notice","classes","Error","Info","Success"],"mappings":"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","file":"index.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonptatum_utils\"] = window[\"webpackJsonptatum_utils\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([27,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","module.exports = wp['i18n'];","module.exports = React;","/**\n * See PHP file inc/Assets.php.\n */\nabstract class BaseOptions {\n    public slug: string;\n    public textDomain: string;\n    public version: string;\n    public restUrl?: string;\n    public restNamespace?: string;\n    public restRoot?: string;\n    public restQuery?: {};\n    public restNonce?: string;\n    public publicUrl?: string;\n\n    /**\n     * Convert a slug like \"my-plugin\" to \"myPlugin\". This can\n     * be useful for library naming (window[\"\"] is bad because the hyphens).\n     *\n     * @param slug\n     * @returns\n     */\n    public static slugCamelCase(slug: string) {\n        return slug.replace(/-([a-z])/g, (g) => g[1].toUpperCase());\n    }\n\n    /**\n     * Get the slug from the current process (webpack) instead of the PHP plugin output.\n     * For some cases you need to use that.\n     *\n     * @param env\n     * @param camelCase\n     */\n    public static getPureSlug(env: typeof process.env, camelCase = false) {\n        return camelCase ? BaseOptions.slugCamelCase(env.slug) : env.slug;\n    }\n}\n\nexport { BaseOptions };\n","const untrailingslashit = (str: string): string =>\n    str.endsWith(\"/\") || str.endsWith(\"\\\\\") ? untrailingslashit(str.slice(0, -1)) : str;\nconst trailingslashit = (str: string): string => `${untrailingslashit(str)}/`;\n\n// Allows to make an interface extension and make some properties optional (https://git.io/JeK6J)\ntype AllKeyOf<T> = T extends never ? never : keyof T;\ntype Optional<T, K> = { [P in Extract<keyof T, K>]?: T[P] };\ntype WithOptional<T, K extends AllKeyOf<T>> = T extends never ? never : Omit<T, K> & Optional<T, K>;\n\nexport { untrailingslashit, trailingslashit, AllKeyOf, Optional, WithOptional };\n","import { createContext, FC, useContext } from \"react\";\n\n/* istanbul ignore next: no logic in this factory! */\n/**\n * Create context relevant objects to use within React.\n *\n * @param object\n * @returns\n */\nfunction createContextFactory<T>(object: T) {\n    /**\n     * MobX stores collection\n     */\n    const StoreContext = createContext(object);\n\n    /**\n     * MobX HOC to get the context via hook.\n     *\n     * @param children\n     */\n    const StoreProvider: FC<{}> = ({ children }) => (\n        <StoreContext.Provider value={object}>{children}</StoreContext.Provider>\n    );\n\n    /**\n     * Get all the MobX stores via a single hook.\n     */\n    const useStores = () => useContext(StoreContext);\n\n    return { StoreContext, StoreProvider, useStores };\n}\n\nexport { createContextFactory };\n","enum RouteHttpVerb {\n    GET = \"GET\",\n    POST = \"POST\",\n    PUT = \"PUT\",\n    DELETE = \"DELETE\",\n    PATCH = \"PATCH\"\n}\n\nexport { RouteHttpVerb };\n","import Url from \"url-parse\";\nimport { trailingslashit, untrailingslashit } from \"../../helpers\";\nimport { BaseOptions } from \"../../options\";\nimport { RouteHttpVerb } from \".\";\nimport deepMerge from \"deepmerge\";\n\n// Use _method instead of Http verb\nconst WP_REST_API_USE_GLOBAL_METHOD = true;\n\ninterface RouteLocationInterface {\n    path: string;\n    namespace?: string;\n    method?: RouteHttpVerb;\n}\n\ntype RouteRequestInterface = {}; // POST-Query in JSON-format\ntype RouteParamsInterface = {}; // Parameters in IRouteLocationInterface#path which gets resolved like \"example/:id\", items not found in the URL are appended as GET\ntype RouteResponseInterface = {}; // Result in JSON-format\n\ninterface RequestArgs {\n    location: RouteLocationInterface;\n    params?: RouteParamsInterface;\n    options: {\n        restRoot: BaseOptions[\"restRoot\"];\n        restNamespace: BaseOptions[\"restNamespace\"];\n        restNonce?: BaseOptions[\"restNonce\"];\n        restQuery?: BaseOptions[\"restQuery\"];\n    };\n}\n\n/**\n * Build an URL for a specific scheme.\n *\n * @param param0\n */\nfunction commonUrlBuilder({\n    location,\n    params = {},\n    nonce = true,\n    options\n}: {\n    nonce?: boolean;\n} & RequestArgs) {\n    const apiUrl = new Url(options.restRoot, true);\n    const { query } = apiUrl;\n    const permalinkPath = (query.rest_route as string) || apiUrl.pathname; // Determine path from permalink settings\n\n    // Find dynamic parameters from URL bindings (like /user/:id)\n    const foundParams: string[] = [];\n    const path = location.path.replace(/:([A-Za-z0-9-_]+)/g, (match: string, group: string) => {\n        foundParams.push(group);\n        return (params as any)[group];\n    });\n    const getParams: any = {};\n\n    // Find undeclared body params (which are not bind above) and add it to GET query\n    for (const checkParam of Object.keys(params)) {\n        if (foundParams.indexOf(checkParam) === -1) {\n            getParams[checkParam] = (params as any)[checkParam]; // We do not need `encodeURIComponent` as it is supported by `url-parse` already\n        }\n    }\n\n    const usePath =\n        trailingslashit(permalinkPath) + untrailingslashit(location.namespace || options.restNamespace) + path;\n\n    // Force protocol from parent location\n    const useThisProtocol = new Url(window.location.href).protocol.slice(0, -1);\n    apiUrl.set(\"protocol\", useThisProtocol);\n\n    // Set path depending on permalink settings\n    if (query.rest_route) {\n        query.rest_route = usePath; // eslint-disable-line @typescript-eslint/naming-convention\n    } else {\n        apiUrl.set(\"pathname\", usePath); // Set path\n    }\n\n    // Append others\n    if (nonce && options.restNonce) {\n        query._wpnonce = options.restNonce;\n    }\n    if (WP_REST_API_USE_GLOBAL_METHOD && location.method && location.method !== RouteHttpVerb.GET) {\n        query._method = location.method;\n    }\n\n    return apiUrl.set(\"query\", deepMerge.all([options.restQuery, getParams, query])).toString();\n}\n\nexport {\n    WP_REST_API_USE_GLOBAL_METHOD,\n    RouteLocationInterface,\n    RouteRequestInterface,\n    RouteParamsInterface,\n    RouteResponseInterface,\n    RequestArgs,\n    commonUrlBuilder,\n    Url\n};\n","import { RouteResponseInterface } from \".\";\n\n/**\n * Get the result of the `Response`. It also handles multiline responses, e. g.\n * a PHP `Notice:` message is output through a conflicting plugin:\n */\nasync function parseResult<TResponse extends RouteResponseInterface>(url: string, result: Response) {\n    const cloneForFallback = result.clone();\n    try {\n        return (await result.json()) as TResponse;\n    } catch (e) {\n        // Something went wrong, try each line as result of a JSON string\n        const body = await cloneForFallback.text();\n        console.warn(`The response of ${url} contains unexpected JSON, try to resolve the JSON line by line...`, {\n            body\n        });\n        let lastError: any;\n        for (const line of body.split(\"\\n\")) {\n            if (line.startsWith(\"[\") || line.startsWith(\"{\")) {\n                try {\n                    return JSON.parse(line) as TResponse;\n                } catch (e) {\n                    lastError = e;\n                }\n            }\n        }\n        throw lastError;\n    }\n}\n\nexport { parseResult };\n","import {\n    WP_REST_API_USE_GLOBAL_METHOD,\n    RouteRequestInterface,\n    RouteParamsInterface,\n    RouteResponseInterface,\n    RequestArgs,\n    commonUrlBuilder,\n    RouteHttpVerb\n} from \"./\";\nimport deepMerge from \"deepmerge\";\nimport Url from \"url-parse\";\nimport \"whatwg-fetch\"; // window.fetch polyfill\nimport { parseResult } from \".\";\n\n/**\n * Build and execute a specific REST query.\n *\n * @see urlBuilder\n * @returns Result of REST API\n * @throws\n */\nasync function commonRequest<\n    TRequest extends RouteRequestInterface,\n    TParams extends RouteParamsInterface,\n    TResponse extends RouteResponseInterface\n>({\n    location,\n    options,\n    request: routeRequest,\n    params,\n    settings = {}\n}: {\n    request?: TRequest;\n    params?: TParams;\n    settings?: Partial<{ -readonly [P in keyof Request]: Request[P] }>;\n} & RequestArgs): Promise<TResponse> {\n    const url = commonUrlBuilder({ location, params, nonce: false, options });\n\n    // Use global parameter (see https://developer.wordpress.org/rest-api/using-the-rest-api/global-parameters/)\n    if (WP_REST_API_USE_GLOBAL_METHOD && location.method && location.method !== RouteHttpVerb.GET) {\n        settings.method = RouteHttpVerb.POST;\n    } else {\n        settings.method = RouteHttpVerb.GET;\n    }\n\n    // Request with GET/HEAD method cannot have body\n    const apiUrl = new Url(url, true);\n    const allowBody = [\"HEAD\", \"GET\"].indexOf(settings.method) === -1;\n    if (!allowBody && routeRequest) {\n        apiUrl.set(\"query\", deepMerge(apiUrl.query, routeRequest));\n    }\n\n    const apiUrlBuilt = apiUrl.toString();\n    const result = await window.fetch(\n        apiUrlBuilt,\n        deepMerge.all([\n            settings,\n            {\n                headers: {\n                    \"Content-Type\": \"application/json;charset=utf-8\",\n                    \"X-WP-Nonce\": options.restNonce\n                },\n                body: allowBody ? JSON.stringify(routeRequest) : undefined\n            }\n        ])\n    );\n\n    // `window.fetch` does not throw an error if the server response an error code.\n    if (!result.ok) {\n        let responseJSON = undefined;\n        try {\n            responseJSON = await parseResult<TResponse>(apiUrlBuilt, result);\n        } catch (e) {\n            // Silence is golden.\n        }\n\n        // Set this request as failing so the endpoint is probably corrupt (see `corrupRestApi.tsx`)\n        settings.method === RouteHttpVerb.GET &&\n            (window.detectCorrupRestApiFailed = (window.detectCorrupRestApiFailed || 0) + 1);\n\n        const resultAny = result as any;\n        resultAny.responseJSON = responseJSON;\n        throw resultAny;\n    }\n\n    return parseResult<TResponse>(apiUrlBuilt, result);\n}\n\nexport { commonRequest };\n","import { BaseOptions } from \"../../options\";\nimport { WithOptional } from \"../..\";\nimport {\n    commonUrlBuilder,\n    RouteRequestInterface,\n    RouteParamsInterface,\n    RouteResponseInterface,\n    commonRequest\n} from \"./\";\n\n/**\n * Create a uri builder and request function for your specific plugin depending\n * on the rest root and additional parameters.\n *\n * @param options\n * @see urlBuilder\n * @see request\n */\nfunction createRequestFactory(options: BaseOptions) {\n    const urlBuilder = (passOptions: WithOptional<Parameters<typeof commonUrlBuilder>[0], \"options\">) =>\n        commonUrlBuilder({\n            ...passOptions,\n            options: {\n                restNamespace: options.restNamespace,\n                restNonce: options.restNonce,\n                restQuery: options.restQuery,\n                restRoot: options.restRoot\n            }\n        });\n\n    const request = <\n        Request extends RouteRequestInterface,\n        Params extends RouteParamsInterface,\n        Response extends RouteResponseInterface\n    >(\n        passOptions: WithOptional<Parameters<typeof commonRequest>[0], \"options\"> & {\n            params?: Params;\n            request?: Request;\n        }\n    ): Promise<Response> =>\n        commonRequest({\n            ...passOptions,\n            options: {\n                restNamespace: options.restNamespace,\n                restNonce: options.restNonce,\n                restQuery: options.restQuery,\n                restRoot: options.restRoot\n            }\n        });\n\n    return {\n        urlBuilder,\n        request\n    };\n}\n\nexport { createRequestFactory };\n","declare global {\n    interface Window {\n        /**\n         * This number indicates the failed `GET` requests for all REST API calls.\n         * See also `commonRequest.tsx`.\n         */\n        detectCorrupRestApiFailed: number;\n    }\n}\n\nconst WAIT_TO_TEST = 10000;\n\nconst NOTICE_ID = \"notice-corrupt-rest-api\";\n\n/**\n * Register a new endpoint which needs to resolve to a valid JSON result. In this way we\n * can detect a corrupt REST API namespace e. g. it is blocked through a security plugin.\n */\nfunction handleCorrupRestApi(resolve: Record<string, () => Promise<void>>, forceRerequest = false) {\n    // Initially set\n    window.detectCorrupRestApiFailed = window.detectCorrupRestApiFailed || 0;\n\n    setTimeout(async () => {\n        const notice = document.getElementById(NOTICE_ID);\n\n        // Only in backend and when a corrupt REST API detected\n        if (notice && (window.detectCorrupRestApiFailed > 0 || forceRerequest)) {\n            for (const namespace of Object.keys(resolve)) {\n                try {\n                    await resolve[namespace]();\n                } catch (e) {\n                    notice.style.display = \"block\";\n                    const li = document.createElement(\"li\");\n                    li.innerHTML = `- <code>${namespace}</code>`;\n                    notice.childNodes[1].appendChild(li);\n                }\n            }\n        }\n    }, WAIT_TO_TEST);\n}\n\nexport { handleCorrupRestApi };\n","// @see https://github.com/Automattic/wp-calypso/blob/master/packages/i18n-calypso/src/index.js\n\nimport { ReactNode, ReactElement } from \"react\";\nimport interpolate from \"interpolate-components\";\nimport * as wpi18n from \"@wordpress/i18n\";\nimport wp from \"wp\";\n\n/**\n * Create multiple functions for a specific plugin so they can be localized.\n *\n * @param slug The slug which you have registered your i18n assets\n * @returns\n */\nfunction createLocalizationFactory(slug: string) {\n    const { wpi18nLazy } = window as any;\n    if (wpi18nLazy && wpi18nLazy[slug] && wp && wp.i18n) {\n        for (const localeData of wpi18nLazy[slug]) {\n            wp.i18n.setLocaleData(localeData, slug);\n        }\n    }\n\n    /**\n     * Translates and retrieves the singular or plural form based on the supplied number.\n     * For arguments sprintf is used, see http://www.diveintojavascript.com/projects/javascript-sprintf for\n     * specification and usage.\n     *\n     * @see https://github.com/WordPress/gutenberg/tree/master/packages/i18n#_n\n     * @see https://github.com/WordPress/gutenberg/tree/master/packages/i18n#sprintf\n     */\n    function _n(single: string, plural: string, count: number, ...args: any[]): string {\n        return wpi18n.sprintf(wpi18n._n(single, plural, count, slug), ...args) as string;\n    }\n\n    /**\n     * Translates and retrieves the singular or plural form based on the supplied number, with gettext context.\n     * For arguments sprintf is used, see http://www.diveintojavascript.com/projects/javascript-sprintf for\n     * specification and usage.\n     *\n     * @see https://github.com/WordPress/gutenberg/tree/master/packages/i18n#_n\n     * @see https://github.com/WordPress/gutenberg/tree/master/packages/i18n#sprintf\n     */\n    function _nx(single: string, plural: string, count: number, context: string, ...args: any[]): string {\n        return wpi18n.sprintf(wpi18n._nx(single, plural, count, context, slug), ...args) as string;\n    }\n\n    /**\n     * Retrieve translated string with gettext context.\n     * For arguments sprintf is used, see http://www.diveintojavascript.com/projects/javascript-sprintf for\n     * specification and usage.\n     *\n     * @see https://github.com/WordPress/gutenberg/tree/master/packages/i18n#_n\n     * @see https://github.com/WordPress/gutenberg/tree/master/packages/i18n#sprintf\n     */\n    function _x(single: string, context: string, ...args: any[]): string {\n        return wpi18n.sprintf(wpi18n._x(single, context, slug), ...args) as string;\n    }\n\n    /**\n     * Retrieve the translation of text.\n     * For arguments sprintf is used, see http://www.diveintojavascript.com/projects/javascript-sprintf for\n     * specification and usage.\n     *\n     * @see https://github.com/WordPress/gutenberg/tree/master/packages/i18n#_n\n     * @see https://github.com/WordPress/gutenberg/tree/master/packages/i18n#sprintf\n     */\n    function __(single: string, ...args: any[]): string {\n        return wpi18n.sprintf(wpi18n.__(single, slug), ...args) as string;\n    }\n\n    /**\n     * This function allows you to interpolate react components to your translations.\n     * You have to pass an already translated string as argument! For this you can use the other\n     * i18n functions like _n() or __().\n     *\n     * A translation can look like this: \"Hello {{a}}click me{{/a}}.\" and you have to pass\n     * a component with key \"a\".\n     */\n    function _i(translation: string, components?: { [placeholder: string]: ReactElement }): any {\n        return interpolate({\n            mixedString: translation,\n            components\n        }) as ReactNode;\n    }\n\n    return { _n, _nx, _x, __, _i };\n}\n\nexport { createLocalizationFactory };\n","import {\n    RouteLocationInterface,\n    RouteHttpVerb,\n    RouteResponseInterface,\n    RouteRequestInterface,\n    RouteParamsInterface\n} from \"../factory\";\n\nexport const locationRestPluginGet: RouteLocationInterface = {\n    path: \"/plugin\",\n    method: RouteHttpVerb.GET\n};\n\nexport type RequestRoutePluginGet = RouteRequestInterface;\n\nexport type ParamsRoutePluginGet = RouteParamsInterface;\n\nexport interface ResponseRoutePluginGet extends RouteResponseInterface {\n    Name: string;\n    PluginURI: string;\n    Version: string;\n    Description: string;\n    Author: string;\n    AuthorURI: string;\n    TextDomain: string;\n    DomainPath: string;\n    Network: boolean;\n    Title: string;\n    AuthorName: string;\n}\n","import React from \"react\";\nimport { FC, ReactNode } from \"react\";\nimport classNames from \"classnames\";\n\nenum ButtonType {\n    Primary,\n    Secondary\n}\n\ninterface ButtonProps {\n    [key: string]: any;\n    className?: string;\n    type?: ButtonType;\n    children: ReactNode;\n}\n\nconst Button: FC<ButtonProps> = ({ className, type, children, ...rest }) => {\n    const buttonClassName = classNames(className, {\n        \"button-primary\": type === ButtonType.Primary,\n        \"button-secondary\": type === ButtonType.Secondary || !type\n    });\n    return (\n        <button className={buttonClassName} {...rest}>\n            {children}\n        </button>\n    );\n};\n\nexport { Button, ButtonType };\n","import React from \"react\";\nimport { ReactNode, FC } from \"react\";\nimport classNames from \"classnames\";\n\nenum NoticeType {\n    Error = \"Error\",\n    Info = \"Info\",\n    Success = \"Success\"\n}\n\ninterface NoticeProps {\n    type?: NoticeType;\n    children: ReactNode;\n}\n\nconst Notice: FC<NoticeProps> = ({ type, children }) => {\n    const classes = classNames({\n        notice: true,\n        \"notice-error\": type === NoticeType.Error,\n        \"notice-info\": type === NoticeType.Info,\n        \"notice-success\": type === NoticeType.Success\n    });\n\n    return (\n        <div className={classes}>\n            <p>{children}</p>\n        </div>\n    );\n};\n\nexport { Notice, NoticeType };\n","module.exports = wp;"],"sourceRoot":""}